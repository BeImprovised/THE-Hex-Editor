// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include "main.h"
#include <iostream>

Fl_Double_Window *file_browser=(Fl_Double_Window *)0;

Fl_Check_Browser *choose_files=(Fl_Check_Browser *)0;

Fl_Double_Window *window_main=(Fl_Double_Window *)0;

Fl_Menu_Bar *main_menu=(Fl_Menu_Bar *)0;

Fl_Menu_Item menu_main_menu[] = {
 {"&File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Open", 0x4006f,  (Fl_Callback*)open_hex, (void*)(value_info), 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Partial Open", 0x40070,  (Fl_Callback*)open_partial, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save", 0x40073,  (Fl_Callback*)save_hex, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save As", 0x50073,  (Fl_Callback*)save_as_hex, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Partial Save", 0x50070,  (Fl_Callback*)save_partial, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Export", 0,  (Fl_Callback*)file_export, (void*)(value_info), 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"Quit", 0x40071,  (Fl_Callback*)quit_hex, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&Edit", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Clear", 0x80063,  (Fl_Callback*)clear_hex, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&View", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Hexadecimal", 0x50068,  (Fl_Callback*)view_hex, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Octal", 0x5006f,  (Fl_Callback*)view_octal, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&Demo", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"ASD File Parsing", 0x50061,  (Fl_Callback*)parse_asd, (void*)(value_info), 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&Help", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"About", 0,  (Fl_Callback*)show_help, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Text_Editor *hex_edit=(Fl_Text_Editor *)0;

Fl_Scrollbar *hex_scroll=(Fl_Scrollbar *)0;

Fl_Group *hex_group=(Fl_Group *)0;

Fl_Box *main_mode=(Fl_Box *)0;

Fl_Box *main_output=(Fl_Box *)0;

Fl_Box *main_status=(Fl_Box *)0;

Fl_Progress *progress_bar=(Fl_Progress *)0;

Fl_Output *hex_out=(Fl_Output *)0;

Fl_Output *oct_out=(Fl_Output *)0;

Fl_Output *bin_out=(Fl_Output *)0;

Fl_Output *ascii_out=(Fl_Output *)0;

Fl_Output *dec_out=(Fl_Output *)0;

Fl_Output *etb_out=(Fl_Output *)0;

Fl_Output *stb_out=(Fl_Output *)0;

Fl_Check_Button *sign_change=(Fl_Check_Button *)0;

Fl_Input *_offset_hex=(Fl_Input *)0;

Fl_Input *_offset_dec=(Fl_Input *)0;

Fl_Button *gotooffset=(Fl_Button *)0;

Fl_Group *query_field=(Fl_Group *)0;

Fl_Text_Display *view_header=(Fl_Text_Display *)0;

Fl_Input *offset_hex=(Fl_Input *)0;

Fl_Input *offset_dec=(Fl_Input *)0;

Fl_Input *bytes_number=(Fl_Input *)0;

Fl_Input_Choice *field_type=(Fl_Input_Choice *)0;

Fl_Button *getvalue=(Fl_Button *)0;

Fl_Button *savevalue=(Fl_Button *)0;

int main(int argc, char **argv) {
  generate_delegates(TypeBase<Byte>)
          generate_delegates(TypeBase<UnsignedShort>)
          generate_delegates(TypeBase<UnsignedInt>)
          generate_delegates(TypeBase<UnsignedChar>)
          generate_delegates(TypeBase<Char>)
          generate_delegates(TypeBase<Int>)
          generate_delegates(TypeBase<Float>)
          generate_delegates(TypeBase<Double>)
          generate_delegates(TypeBase<AppData>)
          generate_delegates(TypeBase<GPSData>)
          generate_delegates(TypeBase<UnsignedLong>)
          generate_delegates(TypeBase<StructTm>)
          generate_delegates(TypeBase<Time_T>)
          generate_delegates(TypeBase<ReverseInt>)
  
          for(auto i : delegates)
          {
              //type_table[type_log[i]] = ft[i];
              //type_word_length[type_log[i]] = wl[i];
              name_to_delegate[i->name()] = i;
  
          }
  
  
  
          //ValueInfo * value_info = new ValueInfo();
  
          /****** Setup Hex Lookup Vector ******/
          for(int x = -1; ++x <= 255;)
          {
              string temp = umulti_base(x, 16);
  
              if(temp.length() < 2)
              {
                  temp = "0" + temp;
              }
  
              hex_log.push_back(temp);        // int as index to get hex number represent as string, just for one byte
              hex_table[hex_log[x]] = x;      // opposite direction mapping use int as result, just for one byte
          }
  
          /****** Setup Octal Lookup Vector ******/
          for(int x = -1; ++x <= 255;)
          {
              string temp = umulti_base(x, 8);
  
              if(temp.length() == 1)
              {
                  temp = "00" + temp;
              }
  
              else if(temp.length() == 2)
              {
                  temp = "0" + temp;
              }
  
              oct_log.push_back(temp);    // just for one byte
              oct_table[oct_log[x]] = x;  // just for one byte
          }
  
          /****** Setup ASCII Lookup Vector ******/
          string pre [] = {"NUL", "SOH", "STX", "ETX", "EOT", "ENQ", "ACK", "BEL", "BS", "HT", "NL", "VT", "NP", "CR", "SO", "SI", "DLE", "DC1", "DC2", "DC3", "DC4", "NAK", "SYN", "ETB", "CAN", "EM", "SUB", "ESC", "FS", "GS", "RS", "US", "SPC"};
  
          for(int x = -1; ++x < 33;)
          {
              ascii_log.push_back(pre[x]);
          }
  
          for(int x = 32; ++x < 256;)
          {
              string temp = "";
              temp += (char)x;
              ascii_log.push_back(temp);
          }
  
          for(int x = -1; ++x < 256;)
          {
              ascii_table[ascii_log[x]] = x;  // just for one byte
          }
  { file_browser = new Fl_Double_Window(655, 350);
    { choose_files = new Fl_Check_Browser(0, 1, 655, 310);
    } // Fl_Check_Browser* choose_files
    { Fl_Group* o = new Fl_Group(0, 310, 655, 40);
      { new Fl_Return_Button(524, 319, 125, 25, "OK");
      } // Fl_Return_Button* o
      { new Fl_Button(354, 319, 125, 25, "Cancel");
      } // Fl_Button* o
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Group* o
    file_browser->set_non_modal();
    file_browser->end();
  } // Fl_Double_Window* file_browser
  { window_main = new Fl_Double_Window(1015, 505, "The Hex Editor");
    window_main->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    { Fl_Group* o = new Fl_Group(-3, 0, 722, 508, "Left");
      o->labeltype(FL_NO_LABEL);
      { Fl_Group* o = new Fl_Group(-3, 0, 721, 25, "Menu");
        o->labeltype(FL_NO_LABEL);
        { main_menu = new Fl_Menu_Bar(-1, 0, 720, 25, "MAIN_MENU");
          main_menu->box(FL_THIN_UP_BOX);
          main_menu->down_box(FL_THIN_UP_BOX);
          main_menu->labeltype(FL_SHADOW_LABEL);
          main_menu->menu(menu_main_menu);
        } // Fl_Menu_Bar* main_menu
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(-1, 25, 721, 458, "Edit");
        o->labeltype(FL_NO_LABEL);
        { Fl_Group* o = new Fl_Group(-1, 25, 722, 458, "Edit window");
          o->labeltype(FL_NO_LABEL);
          { Fl_Group* o = new Fl_Group(-1, 25, 707, 458, "Edit");
            o->labeltype(FL_NO_LABEL);
            { hex_edit = new Fl_Text_Editor(-1, 25, 706, 458);
              hex_edit->box(FL_GTK_THIN_DOWN_BOX);
              Fl_Group::current()->resizable(hex_edit);
            } // Fl_Text_Editor* hex_edit
            o->end();
            Fl_Group::current()->resizable(o);
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(704, 25, 16, 458, "Scroll");
            o->labeltype(FL_NO_LABEL);
            { hex_scroll = new Fl_Scrollbar(705, 27, 15, 456);
            } // Fl_Scrollbar* hex_scroll
            o->end();
          } // Fl_Group* o
          o->end();
          Fl_Group::current()->resizable(o);
        } // Fl_Group* o
        o->end();
        Fl_Group::current()->resizable(o);
      } // Fl_Group* o
      { hex_group = new Fl_Group(-1, 483, 721, 26, "Status");
        hex_group->labeltype(FL_NO_LABEL);
        { main_mode = new Fl_Box(583, 483, 138, 25);
          main_mode->box(FL_FLAT_BOX);
        } // Fl_Box* main_mode
        { main_output = new Fl_Box(254, 483, 200, 25);
          main_output->box(FL_FLAT_BOX);
        } // Fl_Box* main_output
        { main_status = new Fl_Box(456, 483, 125, 25);
          main_status->box(FL_FLAT_BOX);
        } // Fl_Box* main_status
        { progress_bar = new Fl_Progress(1, 483, 250, 25);
          progress_bar->box(FL_FLAT_BOX);
        } // Fl_Progress* progress_bar
        hex_group->end();
      } // Fl_Group* hex_group
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(719, 0, 648, 508, "Control");
      o->labeltype(FL_NO_LABEL);
      { Fl_Tabs* o = new Fl_Tabs(719, 0, 648, 514, "TAB");
        o->box(FL_GTK_THIN_UP_FRAME);
        o->labeltype(FL_NO_LABEL);
        { Fl_Group* o = new Fl_Group(719, 25, 306, 484, "Byte Edit");
          { Fl_Group* o = new Fl_Group(720, 25, 296, 0, "Resizable");
            o->labeltype(FL_NO_LABEL);
            o->end();
            Fl_Group::current()->resizable(o);
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(720, 25, 301, 458, "Input Container");
            o->labeltype(FL_NO_LABEL);
            { Fl_Group* o = new Fl_Group(720, 25, 296, 458, "Input");
              o->labeltype(FL_NO_LABEL);
              { hex_out = new Fl_Output(827, 56, 187, 25, "Hexadecimal");
                hex_out->box(FL_GTK_THIN_DOWN_BOX);
              } // Fl_Output* hex_out
              { oct_out = new Fl_Output(827, 101, 187, 25, "Octal");
                oct_out->box(FL_GTK_THIN_DOWN_BOX);
              } // Fl_Output* oct_out
              { bin_out = new Fl_Output(827, 145, 187, 25, "Binary");
                bin_out->box(FL_GTK_THIN_DOWN_BOX);
              } // Fl_Output* bin_out
              { ascii_out = new Fl_Output(827, 185, 187, 25, "ASCII");
                ascii_out->box(FL_GTK_THIN_DOWN_BOX);
              } // Fl_Output* ascii_out
              { dec_out = new Fl_Output(827, 227, 187, 25, "Decimal");
                dec_out->box(FL_GTK_THIN_DOWN_BOX);
              } // Fl_Output* dec_out
              { etb_out = new Fl_Output(827, 272, 187, 25, "8 bit");
                etb_out->box(FL_GTK_THIN_DOWN_BOX);
              } // Fl_Output* etb_out
              { stb_out = new Fl_Output(827, 315, 187, 25, "6 bit");
                stb_out->box(FL_GTK_THIN_DOWN_BOX);
              } // Fl_Output* stb_out
              { sign_change = new Fl_Check_Button(830, 359, 184, 25, "Show Values As Signed");
                sign_change->down_box(FL_DOWN_BOX);
              } // Fl_Check_Button* sign_change
              { _offset_hex = new Fl_Input(826, 402, 187, 25, "Offset in Hex");
                _offset_hex->box(FL_THIN_DOWN_BOX);
                _offset_hex->callback((Fl_Callback*)synchronize_offset_to_dec, (void*)(value_info));
                _offset_hex->when(FL_WHEN_CHANGED);
              } // Fl_Input* _offset_hex
              { _offset_dec = new Fl_Input(826, 444, 187, 25, "Offset in Dec");
                _offset_dec->box(FL_THIN_DOWN_BOX);
                _offset_dec->callback((Fl_Callback*)synchronize_offset_to_hex, (void*)(value_info));
                _offset_dec->when(FL_WHEN_CHANGED);
              } // Fl_Input* _offset_dec
              o->end();
            } // Fl_Group* o
            o->end();
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(720, 482, 299, 25, "button_container");
            o->labeltype(FL_NO_LABEL);
            { gotooffset = new Fl_Button(914, 483, 100, 23, "Go");
              gotooffset->box(FL_THIN_UP_BOX);
              gotooffset->callback((Fl_Callback*)goto_offset, (void*)("offset"));
            } // Fl_Button* gotooffset
            o->end();
          } // Fl_Group* o
          o->end();
          Fl_Group::current()->resizable(o);
        } // Fl_Group* o
        { query_field = new Fl_Group(720, 25, 630, 485, "Field Query");
          query_field->callback((Fl_Callback*)refresh_offset, (void*)(value_info));
          query_field->hide();
          { Fl_Group* o = new Fl_Group(720, 25, 300, 258, "Display Container");
            o->labeltype(FL_NO_LABEL);
            { view_header = new Fl_Text_Display(720, 26, 296, 258, "header");
              view_header->box(FL_NO_BOX);
              view_header->labeltype(FL_NO_LABEL);
              view_header->callback((Fl_Callback*)refresh_input, (void*)(value_info));
              view_header->when(FL_WHEN_CHANGED);
              Fl_Group::current()->resizable(view_header);
            } // Fl_Text_Display* view_header
            o->end();
            Fl_Group::current()->resizable(o);
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(720, 284, 296, 200, "Input");
            o->labeltype(FL_NO_LABEL);
            { offset_hex = new Fl_Input(826, 315, 187, 25, "Offset in Hex");
              offset_hex->box(FL_THIN_DOWN_BOX);
              offset_hex->callback((Fl_Callback*)synchronize_offset_to_dec, (void*)(value_info));
              offset_hex->when(FL_WHEN_CHANGED);
              offset_hex->value("0X0000B6");
            } // Fl_Input* offset_hex
            { offset_dec = new Fl_Input(826, 357, 187, 25, "Offset in Dec");
              offset_dec->box(FL_THIN_DOWN_BOX);
              offset_dec->callback((Fl_Callback*)synchronize_offset_to_hex, (void*)(value_info));
              offset_dec->when(FL_WHEN_CHANGED);
              offset_dec->value("182");
            } // Fl_Input* offset_dec
            { bytes_number = new Fl_Input(825, 399, 187, 25, "Size in Dec");
              bytes_number->box(FL_THIN_DOWN_BOX);
              bytes_number->callback((Fl_Callback*)restrict_word_length_dec, (void*)(value_info));
              bytes_number->when(FL_WHEN_CHANGED);
              char buffer[17];buffer[16] = '\0';
                            internal_itoa(name_to_delegate["time_t"]->word_length(), buffer, 10);
                            bytes_number->value(buffer);
            } // Fl_Input* bytes_number
            { field_type = new Fl_Input_Choice(825, 441, 188, 25, "Data Type");
              field_type->box(FL_THIN_DOWN_BOX);
              field_type->callback((Fl_Callback*)bind_query_type, (void*)(value_info));
              field_type->when(FL_WHEN_CHANGED);
              for(auto i : delegates)field_type->add(i->name().c_str());//field_type->add(type_log[i].c_str());
                            field_type->value(name_to_delegate["time_t"]->name().c_str());
            } // Fl_Input_Choice* field_type
            o->end();
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(720, 482, 299, 23, "button container");
            o->labeltype(FL_NO_LABEL);
            { getvalue = new Fl_Button(811, 482, 100, 23, "Get Value");
              getvalue->box(FL_THIN_UP_BOX);
              getvalue->callback((Fl_Callback*)get_value, (void*)(value_info));
            } // Fl_Button* getvalue
            { savevalue = new Fl_Button(913, 482, 100, 23, "Save Info");
              savevalue->box(FL_THIN_UP_BOX);
              savevalue->callback((Fl_Callback*)save_value, (void*)("savevalue"));
            } // Fl_Button* savevalue
            o->end();
          } // Fl_Group* o
          query_field->end();
        } // Fl_Group* query_field
        o->end();
        Fl_Group::current()->resizable(o);
      } // Fl_Tabs* o
      o->end();
    } // Fl_Group* o
    window_main->size_range(800, 400);
    window_main->end();
  } // Fl_Double_Window* window_main
  /****** Secondary Setup ******/
  
  
          //field_type->value("float");
          //field_type->when(FL_WHEN_CHANGED);
          field_type->callback((Fl_Callback*)bind_query_type, (void*)(value_info));
  
          hex_out->color(FL_BACKGROUND_COLOR);
          oct_out->color(FL_BACKGROUND_COLOR);
          bin_out->color(FL_BACKGROUND_COLOR);
          ascii_out->color(FL_BACKGROUND_COLOR);
          dec_out->color(FL_BACKGROUND_COLOR);
          etb_out->color(FL_BACKGROUND_COLOR);
          stb_out->color(FL_BACKGROUND_COLOR);
          view_header->color(FL_BACKGROUND_COLOR);
          view_header->wrap_mode(3, 0);   //view_header->wrap_mode(WRAP_AT_BOUNDS, 0);
          //main_menu->box(FL_UP_BOX);
          //main_output->box(FL_DOWN_BOX);
          //main_mode->box(FL_DOWN_BOX);
          progress_bar->color(FL_BACKGROUND_COLOR);
          main_mode->label(mode.c_str());
          //hex_edit->box(FL_PLASTIC_DOWN_BOX);
          hex_edit->textfont(FL_COURIER);
  
          hex_buffer->text("");
          hex_edit->buffer(hex_buffer);
  
          header_buffer->text("");
          view_header->buffer(header_buffer);
          view_header->box(FL_FLAT_BOX);
          view_header->color(FL_BACKGROUND_COLOR);
          view_header->align(Fl_Align(FL_ALIGN_LEFT));
          hex_scroll->linesize(1);
          hex_scroll->value(0, 0, 0, 1);
          //main_status->box(FL_DOWN_BOX);
          sign_change->value(1);
  
          /****** Add to Hex Editor Group ******/
          //hex_group = new Fl_Group(0, 0, 800, 600, "");
          //hex_group->add(hex_edit);
          //hex_group->end();
  
          /****** Primary Callbacks ******/
          hex_buffer->add_modify_callback(update_save, window_main);
          hex_buffer->call_modify_callbacks();
          hex_scroll->callback(scroll);
          sign_change->callback(flip);
  
          /****** Finish Adding Widgets to Main Window - Display Main Window ******/
          main_status->label("");
  //window_main->end();
          //window_main->show(argc, argv);
          window_main->position((Fl::w()/2 - 400), (Fl::h()/2 - 300));
  window_main->show(argc, argv);
  return Fl::run();
}
